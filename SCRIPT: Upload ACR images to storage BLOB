#!/bin/bash

# Variables
ACR_URL="imagepushacr.azurecr.io"
ACR_USERNAME="imagepushacr"
ACR_PASSWORD="*********************************"
ACR_REPO="imagepushrepo"
BLOB_CONTAINER_NAME="dockerimagestore"
BLOB_STORAGE_ACCOUNT="imagestorage0097"
BLOB_FILE_PATH_PREFIX="images/"
# Azure Storage Authentication (use Storage Account Key for now)
BLOB_STORAGE_ACCOUNT_KEY="****************************************************"

# Step 1: Docker Login to ACR
echo "Logging into Azure Container Registry..."
docker login $ACR_URL -u $ACR_USERNAME -p $ACR_PASSWORD
if [ $? -ne 0 ]; then
    echo "Docker login failed!"
    exit 1
fi
echo "Docker login successful."

# Step 2: Get all image tags from ACR
echo "Fetching image tags from ACR..."
IMAGE_TAGS=$(az acr repository show-tags --name $ACR_URL --repository $ACR_REPO --output tsv)
if [ $? -ne 0 ]; then
    echo "Failed to fetch image tags from ACR!"
    exit 1
fi
echo "Fetched image tags from ACR."

# Step 3: Check for existing blobs in Blob Storage
echo "Checking existing blobs in Azure Blob Storage..."
EXISTING_BLOBS=$(az storage blob list --container-name $BLOB_CONTAINER_NAME --account-name $BLOB_STORAGE_ACCOUNT --account-key $BLOB_STORAGE_ACCOUNT_KEY --query "[].name" -o tsv)
if [ $? -ne 0 ]; then
    echo "Failed to list blobs in Azure Blob Storage!"
    exit 1
fi
echo "Fetched existing blobs from Blob Storage."

# Step 4: Initialize a flag to check if there are new images to push
NEW_IMAGES_FOUND=false

# Step 5: Iterate through all image tags and process each one
for TAG in $IMAGE_TAGS; do
    # Prepare the full image name
    IMAGE_NAME="$ACR_URL/$ACR_REPO:$TAG"
    BLOB_NAME="${BLOB_FILE_PATH_PREFIX}imagepushrepo.${TAG}.tar.gz"

    # Check if the blob for this image tag already exists in Blob Storage
    if echo "$EXISTING_BLOBS" | grep -q "$BLOB_NAME"; then
        echo "Blob for image $IMAGE_NAME already exists. Skipping push."
    else
        # No blob found for this image, so we need to save and push it
        echo "Processing new image $IMAGE_NAME..."

        # Step 5.1: Pull the Docker image to ensure it's available locally
        echo "Pulling image $IMAGE_NAME from ACR..."
        docker pull $IMAGE_NAME
        if [ $? -ne 0 ]; then
            echo "Failed to pull image $IMAGE_NAME!"
            continue
        fi

        # Step 5.2: Create temporary tar and gz files
        TEMP_TAR=$(mktemp --suffix=".tar")
        TEMP_GZ=$(mktemp --suffix=".tar.gz")

        # Step 5.3: Save the Docker image as a tar file
        echo "Saving image $IMAGE_NAME as tar..."
        docker save -o $TEMP_TAR $IMAGE_NAME
        if [ $? -ne 0 ]; then
            echo "Failed to save image $IMAGE_NAME!"
            rm -f $TEMP_TAR
            continue
        fi

        # Step 5.4: Compress the tar file
        echo "Compressing image tar file..."
        gzip -c $TEMP_TAR > $TEMP_GZ
        if [ $? -ne 0 ]; then
            echo "Failed to compress image $IMAGE_NAME!"
            rm -f $TEMP_TAR
            continue
        fi

        # Step 5.5: Push the compressed tar.gz to Blob Storage
        echo "Pushing image to Blob Storage..."
        az storage blob upload \
            --container-name $BLOB_CONTAINER_NAME \
            --file $TEMP_GZ \
            --name $BLOB_NAME \
            --account-name $BLOB_STORAGE_ACCOUNT \
            --account-key $BLOB_STORAGE_ACCOUNT_KEY
        if [ $? -ne 0 ]; then
            echo "Failed to upload image $IMAGE_NAME to Blob Storage!"
            rm -f $TEMP_TAR $TEMP_GZ
            continue
        fi
        echo "Image $IMAGE_NAME pushed to Blob Storage."

        # Clean up temporary files after upload
        rm -f $TEMP_TAR $TEMP_GZ

        # Set the flag to indicate that we found new images
        NEW_IMAGES_FOUND=true
    fi
done

# Step 6: Check if there were no new images processed
if [ "$NEW_IMAGES_FOUND" = false ]; then
    echo "No new images found."
fi

# Step 7: Clean up old images in ACR, keeping only the 3 latest images
echo "Cleaning up old images in ACR, keeping only the 3 latest images..."

# Sort images by tag (numerically) in reverse order to get the most recent first
# Keep only the 3 most recent tags and delete the rest
OLD_IMAGES=$(echo "$IMAGE_TAGS" | sort -V | head -n -3)

for OLD_TAG in $OLD_IMAGES; do
    echo "Deleting old image $ACR_REPO:$OLD_TAG from ACR..."
    az acr repository delete -n $ACR_URL --image $ACR_REPO:$OLD_TAG --yes
    if [ $? -ne 0 ]; then
        echo "Failed to delete image $ACR_REPO:$OLD_TAG!"
    else
        echo "Deleted image $ACR_REPO:$OLD_TAG."
    fi
done

echo "Script completed successfully!"
====================================================================================
USEFUL:
sudo docker login -u imagepushacr imagepushacr.azurecr.io





BUILD IMAGE: sudo docker image build -t imagepushacr.azurecr.io/imagepushrepo:v1 .
PUSH IMAGE: sudo docker image push imagepushacr.azurecr.io/imagepushrepo:v10
PULL IMAGE: sudo docker image pull imagepushacr.azurecr.io/imagepushrepo:v1

CHECK IMAGE IN ACR: az acr repository show-tags --name $ACR_NAME --repository $IMAGE --output tsv
CREATE CONTAINER: docker run -d -p 8080:80 imagepushacr.azurecr.io/imagepushrepo:v4

Listing images in Azure Container Registry:
az acr repository show-tags --name <your-acr-name> --repository <image-name> --output table
az acr repository show-tags --name imagepushacr --repository imagepushrepo --output table

List images along with their image name:
az acr repository show-tags --name imagepushacr --repository imagepushrepo --output tsv | \
xargs -I {} echo "imagepushacr.azurecr.io/imagepushrepo:{}"

Delete particular image version:
az acr repository delete --name imagepushacr --image imagepushrepo:v4 --yes
az acr repository delete --name imagepushacr.azurecr.io --repository imagepushacr --tag 39

az acr repository delete -n imagepushacr --image imagepushrepo:v39
------------------------------------------------------------------
1. Save Docker Image as a Tarball (.tar): docker save -o <image_name>.tar <image_name>:<tag>
EX: docker save -o imagepushrepo.v1.tar imagepushacr.azurecr.io/imagepushrepo:v1

2. Compress the Tarball using gzip: gzip <image_name>.tar
EX: gzip imagepushrepo.v1.tar

4. Load the Compressed Image Tarball (Later Use)
If you want to load the image back into Docker from the tarball, use the docker load command: docker load -i myapp_v1.tar.gz
EX: docker load -i imagepushrepo.v1.tar.gz

=================================================================================

make documentation of every module that learned in azure and post in "share point".

repos, pysping, integrate with pubsub, alerting using python.



I'm planning for certifications in "Microsoft Certified Azure Solutions Architect" and "Certified Kubernetes Administrator(CKA)".

Microsoft Certified Azure Solutions Architect Expert. AZ-303 focuses on the technical setup, while AZ-304 is about designing solutions and planning the architecture.
AZ-303 = Building and managing Azure resources (like virtual machines, networks, and databases).
AZ-304 = Designing the architecture (planning the best solutions for security, cost, scalability, and reliability).
=================================================================================
az storage blob list --account-name $STORAGE_ACCOUNT_NAME --container-name $CONTAINER_NAME --output tsv --query "[].name" --connection-string $CONNECTION_STRING

az storage blob list \
  --account-name yourStorageAccountName \
  --container-name yourContainerName \
  --output table \
  --account-key yourStorageAccountKey


az storage blob list --account-name imagestorage0097 --container-name dockerimagestore --output table --account-key Nke8/j5NQBqhJgRs3BRsTUcZ6z/g7p8I+3oApZwwbtZJuggwueW1JWnWgkKQ19EfTClCyGF5Jin2+ASti3aeRg==


az storage blob upload \
  --account-name yourStorageAccountName \
  --container-name yourContainerName \
  --name yourBlobName \
  --file /path/to/local/file \
  --account-key yourStorageAccountKey

az storage blob upload --account-name imagestorage0097 --container-name dockerimagestore --name script --file /path/to/local/file --account-key Nke8/j5NQBqhJgRs3BRsTUcZ6z/g7p8I+3oApZwwbtZJuggwueW1JWnWgkKQ19EfTClCyGF5Jin2+ASti3aeRg==

az storage blob download \
    --container-name <container-name> \
    --name <blob-name> \
    --file <local-file-path> \
    --account-name <storage-account-name> \
    --account-key <storage-account-key>

az storage blob download \
    --container-name dockerimagestore \
    --name images/imagepushrepo.v4.tar.gz \
    --file ./imagepushrepo.v4.tar.gz \
    --account-name imagestorage0097 \
    --account-key Nke8/j5NQBqhJgRs3BRsTUcZ6z/g7p8I+3oApZwwbtZJuggwueW1JWnWgkKQ19EfTClCyGF5Jin2+ASti3aeRg==


4. Load the Compressed Image Tarball (Later Use)
If you want to load the image back into Docker from the tarball, use the docker load command: docker load -i myapp_v1.tar.gz
EX: docker load -i imagepushrepo.v1.tar.gz
