Memory Usage: 'free -h' Or 'cat /proc/meminfo'

CPU Usage: 'top' Or 'htop'
For a quick CPU summary: 'mpstat'

Disk Usage: 'df -h'

To check running processes in Linux: 'ps aux'
To filter by a specific process (e.g., nginx): 'ps aux | grep nginx'

grep
Which means:
g = globally search
/re/ = for a regular expression
p = and print the lines
Ex: 'grep "hello" file.txt'
--------------------------------------------
Installations:
Docker: 'sudo apt install docker.io'
Ansible:
sudo apt update
sudo apt install software-properties-common
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt install ansible -y
ansible --version
---
Types of inventories in Ansible:
1. Static-inventory: useful when the number of client Virtual Machines are less or dont change.
2. Dynamic-inventory: useful when the number of client Virtual Machines keeps on changine i.e, new VM's get added.
Inventory file has the information related to Client Virtual Machines.
Like their IP's/Host names/Domain_names etc...

Ansible full setup link: https://github.com/summu97/GCP-ANSIBLE.git
=====================================================================================
‚úÖ Sample .gitlab-ci.yml Pipeline (Basic Equivalent)
------------------------------------------
stages:
  - build
  - test
  - sonar
  - docker_build
  - push_artifact
  - deploy

variables:
  MAVEN_CLI_OPTS: "-B -Dmaven.repo.local=.m2/repository"
  SONAR_SCANNER_OPTS: "-Dsonar.projectKey=my-project -Dsonar.host.url=http://your-sonarqube-url -Dsonar.login=$SONAR_TOKEN"
  DOCKER_IMAGE: registry.example.com/your-app
  DOCKER_TAG: $CI_COMMIT_SHORT_SHA

cache:
  paths:
    - .m2/repository

build:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS clean compile

unit_test:
  stage: test
  script:
    - mvn $MAVEN_CLI_OPTS test
  artifacts:
    reports:
      junit: target/surefire-reports/*.xml
    when: always

sonarqube:
  stage: sonar
  script:
    - mvn $MAVEN_CLI_OPTS verify sonar:sonar $SONAR_SCANNER_OPTS
  only:
    - main
    - merge_requests

docker_build:
  stage: docker_build
  script:
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
  only:
    - main

push_artifact:
  stage: push_artifact
  script:
    - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main

deploy:
  stage: deploy
  script:
    - ./deploy.sh $DOCKER_IMAGE:$DOCKER_TAG
  only:
    - main

------------------------------------------
üîê Security Notes
Use CI/CD variables to store sensitive values like credentials or deploy secrets.

Replace deploy.sh with your existing deployment logic (e.g., kubectl apply, docker service update, etc.).
