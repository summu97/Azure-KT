Note: You cannot directly increase the disk size of an existing Persistent Volume (PV) in Kubernetes if it was dynamically provisioned using a storage class that does not support volume expansion.

Point to note: If you have storage class defined with VolumeExpansion: true then follow below steps:

To check If Volume Expansion Is Enabled in StorageClass
USE: kubectl get storageclass <storageclass ame> -o yaml
Check for "allowVolumeExpansion: true". If it is set to false try creating new storage class.

Get the List of PVCs and Their Bound PVs:
USE: kubectl get pvc -A

Find Which Pod is Using the PVC:
USE: kubectl get pods -A -o jsonpath='{range .items[*]}{.metadata.name}{" - PVCs: "}{.spec.volumes[*].persistentVolumeClaim.claimName}{"\n"}{end}'

[If you want to filter by namespace: kubectl get pods -n logging -o jsonpath='{range .items[*]}{.metadata.name}{" - PVCs: "}{.spec.volumes[*].persistentVolumeClaim.claimName}{"\n"}{end}']


patch each PVC to increase the size:
kubectl patch pvc <pvc-name> -n <pvc-namespace> --type='merge' -p '{"spec":{"resources":{"requests":{"storage":"50Gi"}}}}'
EX:
kubectl patch pvc elasticsearch-master-elasticsearch-master-1 -n logging --type='merge' -p '{"spec":{"resources":{"requests":{"storage":"50Gi"}}}}'


Restart Elasticsearch Pods:
kubectl delete pod <elasticsearch pod name> -n <namespace>
EX:
kubectl delete pod elasticsearch-master-1 -n logging
------------------------------------
REFERENCE MANIFEST FOR CREATING CUSTOM STORAGECLASS:

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: expandable-managed-disk
provisioner: disk.csi.azure.com
allowVolumeExpansion: true
parameters:
  skuName: Premium_LRS   # Change to Standard_LRS if needed
  kind: Managed
reclaimPolicy: Retain   # Change to Delete if you want the volume deleted when PVC is deleted
volumeBindingMode: WaitForFirstConsumer
------------------------------------
