
1. Add and Update the Ingress-NGINX Helm Repo
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

2. Create a Namespace
kubectl create namespace ingress-basic

3. (Optional) Reserve an Internal Static IP
gcloud compute addresses create nginx-internal-ip \
  --region=<your-region> \
  --subnet=<your-subnet-name> \
  --addresses=10.1.4.11 \
  --purpose=GCE_ENDPOINT

4. Install NGINX Ingress Controller with Helm
helm install new-ingress-nginx ingress-nginx/ingress-nginx \
  --namespace ingress-basic \
  --create-namespace \
  --set controller.resources.requests.cpu="200m" \
  --set controller.resources.requests.memory="256Mi" \
  --set controller.resources.limits.cpu="500m" \
  --set controller.resources.limits.memory="512Mi" \
  --set controller.replicaCount=2 \
  --set controller.service.type=LoadBalancer \
  --set controller.service.externalTrafficPolicy=Local \
  --set controller.service.loadBalancerIP="10.1.4.11" \
  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-internal"="true" \
  --set controller.ingressClass=nginx \
  --set controller.ingressClassResource.name=nginx \
  --set controller.ingressClassResource.enabled=true \
  --set controller.ingressClassResource.default=false

5. Verify Controller is Up
kubectl get pods -n ingress-basic
kubectl get svc -n ingress-basic
******************************************************************************************************************************************
Required Certificate Files and Their Purpose
✅ Certificate (.crt / .pem)
What it is: Your domain certificate issued by the CA.
Use case: Needed for creating the TLS secret in Kubernetes.
Example: 44b2a9897fb1c2fd.crt

🔑 Private Key (.key)
What it is: Secret key generated during the CSR process.
Use case: Required along with the cert to create a TLS secret (kubectl create secret tls).
Example: _.afmsagaftrafund.org.key (must match the .crt)

📦 Intermediate Certificate / CA Bundle (.crt / .pem / .p7b)
What it is: Chain file linking your certificate to a trusted root.
Use case: Optional but recommended — can be used in a generic Kubernetes secret or concatenated with the cert for full chain.
Example: gd_bundle-g2-g1.crt, gd-g2_iis_intermediates.p7b

🔐 Combined PEM File (.pem)
What it is: May include your cert, key, and/or CA bundle.
Use case: Sometimes used for apps or ingress that expect all-in-one files.
Example: 44b2a9897fb1c2fd.pem


Keys list:
==> _.afmsagaftrafund.org.private.key
==> 44b2a9897fb1c2fd.crt
==> gd_bundle-g2-g1.crt
==> 44b2a9897fb1c2fd.pem]

Create/Update secrets in Kubernetes:

First delete the exisiting generic secrets:

and then create secrets with the following commands:

kubectl create secret tls wildcard-prod-tls-secret --cert="D:\Aftra\CODA-PROD\_.afmsagaftrafund.org - 2026\44b2a9897fb1c2fd.crt" --key="D:\Aftra\CODA-PROD\_.afmsagaftrafund.org - 2026\_.afmsagaftrafund.org.private.key" -n coda-prod


kubectl create secret generic coda-prod-ca-secret --from-file="D:\Aftra\CODA-PROD\_.afmsagaftrafund.org - 2026\44b2a9897fb1c2fd.pem" --from-file="D:\Aftra\CODA-PROD\_.afmsagaftrafund.org - 2026\gd_bundle-g2-g1.crt" -n coda-prod


******************************************************************************************************************************************
In case of applications:
We need to copy certificate which is associated with private key (_.afmsagaftrafund.org.private.key) which is "44b2a9897fb1c2fd.crt" in to the certificate folder in bitbucket which we will be ingested into Dockerfile , this certificate "44b2a9897fb1c2fd.crt can be renamed as certificate.crt in bitbucket certificate folder (latest certificate(2026) is named as certificate in bitbucket)

 """ # Use the OpenJDK 18 JDK Alpine base image
FROM openjdk:18-jdk-alpine

# Set the working directory
WORKDIR /app

# Copy the .jar file and the certificate file to the container
COPY build/libs/securityservice-1.0.jar /app/app.jar
COPY certificate/certificate.crt /app/certificate.crt

RUN apk update && apk upgrade openssl
RUN apk upgrade --no-cache
# Import the certificate into the Java keystore
RUN keytool -importcert -keystore $JAVA_HOME/lib/security/cacerts \
    -storepass changeit -noprompt -alias my_certificate -file /app/certificate.crt  """
******************************************************************************************************************************************
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prod-ingress
  namespace: coda-prod
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "1024m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60s"
spec:
  ingressClassName: coda-prod-internal-ingressclass
  rules:
    - host: prodcoda.afmsagaftrafund.org
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: react-webapp
                port:
                  number: 3000
                  
  tls:
  - hosts:
    - prodcoda.afmsagaftrafund.org
    secretName: wildcard-prod-tls-secret
	

# Here ingress class will define which controller to be used by service created.

******************************************************************************************************************************************
pipeline {

    agent any
 
    options {

        // Keep builds from the last 60 days

        buildDiscarder(logRotator(daysToKeepStr: '60', numToKeepStr: ''))

    }
 
    environment {

        IMAGE_TAG = "prod-${BUILD_NUMBER}"

        ACR_URL = "codaprodacr.azurecr.io"

        ACR_IMAGE = "${ACR_URL}/codaui:${IMAGE_TAG}"

		USERNAME = credentials('ACRUSERNAME')  // Give secret name that you put in your keyvault

        PASSWD = credentials('ACRPASSWD')
 
    }
 
 
    stages {

        stage('Checkout') {

            steps {

                cleanWs()

                git branch: 'CODAUIPROD', 

                    credentialsId: 'd4f3c5de-8b5c-46b2-92ba-4e17042170fe', 

                    url: 'https://vbboya@bitbucket.org/asaiprdf/codaui.git'

            }

        }
 
        stage('Install Dependencies') {

            steps {

                sh 'git checkout CODAUIPROD'

                sh 'npm install --legacy-peer-deps'

                sh 'npm install env-cmd --force'

            }

        }
 
        stage('Build') {

            steps {

                sh 'npm run build:stg'

            }

        }
 
        stage('Build the Docker Image') {

            steps {

                script {

                    sh "sed -i 's/ENVIRONMENT-BUILD_NUMBER/${IMAGE_TAG}/' codaui-prod-deployment.yml"

                    sh "docker image build -f Docker/PROD/Dockerfile -t ${ACR_IMAGE} ."

                }

            }

        }
 
        stage('Push the Docker Image to ACR') {

            steps {

                sh 'echo "$PASSWD" | docker login -u "$USERNAME" --password-stdin ${ACR_URL}'

                sh "docker image push ${ACR_IMAGE}"

            }

        }
 
        stage('Deploy to AKS') {

            steps {

                script {

                    sh 'az login --identity'

                    sh 'az aks get-credentials --resource-group CODA-PROD-RG --name CODA-PROD-AKS-Cluster --overwrite-existing'

                    sh 'kubectl apply -f codaui-prod-deployment.yml'

                    sleep time: 30, unit: 'SECONDS'

                }

            }

        }
 
        stage("Clean Docker and Workspace") {

            steps {

                sh 'docker system prune --all --volumes -f'

                cleanWs()

            }

        }

    }

}

 
