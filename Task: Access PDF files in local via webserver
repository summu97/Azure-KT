Step-by-Step: Secure PDF Hosting with Nginx on Windows
Step 1: Download and Extract Nginx
https://nginx.org/download/nginx-1.28.0.zip

Step 2: Extract it to: C:\

Step 3: Organize Your Files
In C:\nginx-1.28.0\html, create the following structure:
C:\nginx\html\
├── index.html
└── pdfs\
    ├── pdf1.pdf
    ├── pdf2.pdf
    ├── pdf3.pdf
    ├── pdf4.pdf
    └── pdf5.pdf


Step 3: Create index.html
Put this in C:\nginx-1.28.0\html\index.html:
<!DOCTYPE html>
<html>
<head>
    <title>My PDF Library</title>
</head>
<body>
    <h1>PDF Files</h1>
    <ul>
        <li><a href="pdfs/pdf1.pdf" target="_blank">PDF 1</a></li>
        <li><a href="pdfs/pdf2.pdf" target="_blank">PDF 2</a></li>
        <li><a href="pdfs/pdf3.pdf" target="_blank">PDF 3</a></li>
        <li><a href="pdfs/pdf4.pdf" target="_blank">PDF 4</a></li>
        <li><a href="pdfs/pdf5.pdf" target="_blank">PDF 5</a></li>
    </ul>
</body>
</html>


Clicking any link opens the PDF in a new tab.

Step 4: Start Nginx Server
Open PowerShell or Command Prompt, then run:
cd C:\nginx-1.28.0
start nginx.exe

Visit in browser:
http://localhost

Add this to your: nginx.conf
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        location / {
            root   html;
            index  index.html index.htm;
        }

        # Serve PDF files with content-disposition to open in system viewer
        location /pdfs/ {
            root html;
            types {
                application/pdf pdf;
            }
            add_header Content-Disposition "inline; filename=\"$uri\"";
            default_type application/pdf;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}



Step 5: Stop Nginx (when done)
nginx -s stop


Limit Nginx to Localhost Only
Edit C:\nginx\conf\nginx.conf, inside the server block:

server {
    listen       127.0.0.1:80;  # Change from default
    server_name  localhost;

    location / {
        root   html;
        index  index.html;
    }
}

Now it only listens to 127.0.0.1, so only your machine can access it.

Restart Nginx after changes: nginx -s reload


Test Access
http://localhost


Key Point
Browsers do not allow a webpage to force opening a file in an external application like Adobe Acrobat directly from a web link. This is by design for security reasons.
BUT you can influence the browser to not use its built-in viewer, which indirectly opens the PDF in your default system PDF viewer (e.g., Adobe Acrobat), especially when served from your local Nginx.
Unfortunately, modern browsers do not allow local files to automatically open in external apps like Adobe Reader directly through a link — for security reasons. When you click a PDF link in the browser, it will always try to open it inside the browser's built-in PDF viewer.
---------------------
.bat file
@echo off
:: Remove protocol part
setlocal enabledelayedexpansion
set file=%1
set file=!file:openfile://=!
start "" "C:\Program Files (x86)\Adobe\Reader 11.0\Reader\AcroRd32.exe" "!file!"

.reg file
Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\openfile]
@="URL:Open File Protocol"
"URL Protocol"=""

[HKEY_CLASSES_ROOT\openfile\shell]

[HKEY_CLASSES_ROOT\openfile\shell\open]

[HKEY_CLASSES_ROOT\openfile\shell\open\command]
@="\"D:\\open-pdf.bat\" \"%1\""

.html file
<a href="openfile://Z:/TestAlbum~150429.pdf">Open PDF in Acrobat</a>

It launches a small native helper app on the user’s machine, which translates that openfile:// URI into a valid SMB path like:

\\shared-drive\folder\file.pdf
<br>
<a href="file://172.16.120.108/srtitles/test.pdf">Direct</a>


INT_OC_DataIngestion/Data Injection Proj/INT_FileInjection.dtsx
